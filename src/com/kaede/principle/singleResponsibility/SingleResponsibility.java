package com.kaede.principle.singleResponsibility;

/**
 * @author kaede
 * @create 2022-09-03 21:34
 *
 * 面向对象(oo) -> 功能模块[设计模式+算法(数据结构)] -> 框架[使用多种设计模式] -> 架构[服务器集群]
 *
 * 设计模式是为了让程序（软件）拥有更好的：
 *     1）代码重用性
 *     2）可读性
 *     3）可扩展性（增加新功能很方便）
 *     4）可靠性（当增加新功能后，对原来的功能没有影响）
 *     5）使程序呈现高内聚、低耦合的特性
 *
 * 设计模式七大原则：
 *     1）单一职责原则
 *     2）接口隔离原则
 *     3）依赖倒转原则
 *     4）里氏替换原则
 *     5）开闭原则
 *     6）迪米特法则
 *     7）合成复用原则
 *
 * 单一职责原则：一个类应该只负责一项原则。如果A负责两个不同的职责：职责1、职责2，
 *             当职责1需求变更而改变A时，可能造成职责2执行错误，所以需要将A的粒度
 *             分解为A1、A2
 *
 * 单一职责原则注意事项和细节
 *     1）降低类的复杂度，一个类只负责一项职责
 *     2）提高类的可读性，可维护性
 *     3）降低变更引起的风险
 *     4）通常情况下，应当遵守单一职责原则，只有在逻辑足够简单时，才可以在类级别上
 *       违反单一职责原则：当类中方法足够少时，可以在方法级别保持单一职责原则
 */

public class SingleResponsibility {

    public static void main(String[] args) {
        Vehicle vehicle = new Vehicle();
        vehicle.run("自行车");
        vehicle.run("汽车");
        vehicle.run("飞机");
    }

}

//交通工具类
//方式1：在run方法中违法了单一职责原则
//方式2：解决的方式很简单，根据交通工具的不同分解为不同类即可
class Vehicle {
    public void run(String vehicle) {
        System.out.println(vehicle + "在公路上运行...");
    }
}
