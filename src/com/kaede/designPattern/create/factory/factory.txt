对简单工厂模式的理解：
若CoffeeStore需要createCoffee，如果使用传统的new方式，当有多个CoffeeStore时，
此时若需要修改coffee或增加coffee种类，则需要挨个更改所有的CoffeeStore，维护和扩
展起来不方便，此时用CoffeeFactory创建coffee，CoffeeStore只需依赖CoffeeFactory
即可建造对象，若需要修改coffee或增加coffee种类，只需改动工厂足矣

简单工厂模式使用场景：针对于几种不同产品对象的创建


对工厂方法模式的理解：
简单工厂模式和Coffee类有耦合，在修改coffee或增加coffee种类时都需要改动CoffeeFactory，
随着coffee种类的增加，工厂模式中的建造方法也越来越庞大，这时可以引入工厂方法模式，将CoffeeFactory
改为接口，然后CoffeeFactory的实现类实现相应coffee的建造，此时增加coffee种类无需修改现有代码，
直接创建实现类即可，完美符合开闭原则，但是每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类，
这增加了系统的复杂度

工厂方法模式使用场景：
针对一种产品的不同型号对象的创建


对抽象工厂模式的理解：
相当于在工厂方法的针对单个产品构建的基础上，改为针对一个产品族构建

抽象工厂模式使用场景：针对产品族对象的创建，系统中有多个产品族，但每次只使用某一产品族