浅拷贝：
    1）对于数据类型是基本数据类型的成员变量，前拷贝会直接进行值传递，也就是将
       该属性值复制一份给新的对象
    2）对于数据类型是引用类型的成员变量，如数组、对象等，浅拷贝只会进行引用传
       递，即将该成员变量的引用值（内存地址）复制一份给新的对象，在这种情况下，
       在一个对象中修改该成员变量会影响到另一个对象的该成员变量值
    3）上一例的克隆羊就是浅拷贝
    4）浅拷贝是使用默认的clone()方法来实现

深拷贝：
    1）复制对象的所有基本数据类型的成员变量值
    2）为所有的引用数据类型的成员变量申请存储空间，并复制每个引用数据类型成员变量
       所引用的对象，直到复制完该对象可达的所有对象，即对象进行深拷贝要对整个对象
       进行拷贝
    3）深拷贝实现方式1：重写clone方法来实现深拷贝
       深拷贝实现方式2：通过对象序列化实现深拷贝（推荐）

原型模式使用场景：
1、类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等
2、性能和安全要求的场景
3、通过new产生一个对象需要非常繁琐的数据准备或访问权限
4、一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用